@page "/"
@using TokenTestingBlazor.Client.Models
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))

@inject HttpClient http
@inject CookieStorageAccessor cookies
@inject CanvasProfileAccessor profile

<PageTitle>Canvas Assistant</PageTitle>


@if (pageLoading)
{
    <div>
        <p>Loading...</p>
    </div>
}
else
{
    <NavBar LoggedIn="@(token is null ? false : true)" />

    @if (token is null || profileDTO is null)
    {
        <div class="homeWrapper">
            <h1>Canvas Assistant</h1>

            <h4>Now in Blazor!</h4>
        </div>
    }
    else
    {
        <div class="homeWrapper">
            <h1>@($"Welcome, {profileDTO.name}!")</h1>

            <p>@($"User ID: {profileDTO.login_id}")</p>
        </div>
    }
}

@code {
    private bool pageLoading = true;
    private string? token = null;
    private CanvasProfile? profileDTO = null;

    private async Task FetchProfile()
    {
        token = await cookies.GetValueAsync<string>("canvas_access_token");

        if (token != null)
        {
            try
            {
                profileDTO = await profile.GetCanvasProfileAsync(token);
            }
            catch (Exception ex)
            {
                Console.WriteLine("Error fetching profile");
                Console.WriteLine(ex);
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await FetchProfile();
        pageLoading = false;
    }
}